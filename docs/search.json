[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Basics of Statistics and R",
    "section": "",
    "text": "Preface - Aim and Scope"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Field, Andy P., Jeremy Miles, and Zoë Field. 2012. Discovering\nStatistics Using R. London ; Thousand Oaks, Calif:\nSage.\n\n\n\nLast modified: 2023-08-22 15:06, R version 4.3.1\nSource data for this page can be found here."
  },
  {
    "objectID": "1stats_1basics.html",
    "href": "1stats_1basics.html",
    "title": "1  The Basic Idea of Statistics",
    "section": "",
    "text": "Last modified: 2023-08-22 14:03, R version 4.3.1\nSource data for this page can be found here."
  },
  {
    "objectID": "1stats_2sampling.html",
    "href": "1stats_2sampling.html",
    "title": "2  Sampling",
    "section": "",
    "text": "Last modified: 2023-08-22 14:38, R version 4.3.1\nSource data for this page can be found here."
  },
  {
    "objectID": "2desc_1basics.html",
    "href": "2desc_1basics.html",
    "title": "3  Describing Things",
    "section": "",
    "text": "Last modified: 2023-08-22 14:03, R version 4.3.1\nSource data for this page can be found here."
  },
  {
    "objectID": "index.html#what-is-this",
    "href": "index.html#what-is-this",
    "title": "Basics of Statistics and R",
    "section": "What is this?",
    "text": "What is this?\nThis is not an exhaustive book featuring deep dives into the history or application of specific statistics concepts, ideas and methods. It is also not meant to be a textbook accompanying a university course - although I might use it in this way in the future.\nInstead, this is meant to be a collection of small texts and examples serving as primers on core statistical concepts, methods and workflows. The aim here is to present the basic ideas (as well as their execution in R) and explain the reasons behind these ideas, in order to give you a general understanding as to what is happening. I will also point you in the right direction if you want to dive deeper.\n\nAren’t there many resources like this already?\nYes, and no. Although a lot of books have been written about the core ideas behind statistical methods, and many web resources about the application of these methods in any given statistical program exist, these suffer from some major drawbacks:\n\nBooks are long and nobody wants to read anymore. I hope that my way of explaining stuff as concise as possible, as well as my way of writing will resonate in a way that many “dry” statistics textbooks simply can’t.\nWhile Andy Field’s (2012) is still a great book on the subject, it was published in 2012 and much of the code used is unfortunately wildly out-of-date. Don’t get me wrong, most of it will still work fine. However, better and more user-friendly ways to work in R have emerged since.\nAt the end of the day statistics is math, and math people love communicating via formulas and mathematical notations. I don’t know about you, but unfortunately my brain shuts off whenever I see more than two mathematical formulas in a text. Therefore, I will try to keep the mathematics to a minimum and instead focus on examples and comparisons to explain ideas.\nHow-To guides tend to focus mainly on the “how” of statistical methods and not on the “why” behind it. While they might make you an expert about anything a given R (Python, …) function may be able to do, you still won’t know when and how to use them - or why you might get certain weird results back. Also, nowadays LLMs can teach you the “how” part probably better than any website ever will.\nMost statistics websites are run by professional website owners. This is not meant as a dig at them - they can do whatever they want - but I personally hate seeing ads and cookie-popups when I just want to find out why my code won’t work. Therefore, you won’t find ads or cookie banners here, because I don’t care who you are. :)"
  },
  {
    "objectID": "index.html#the-core-structure",
    "href": "index.html#the-core-structure",
    "title": "Basics of Statistics and R",
    "section": "The Core Structure",
    "text": "The Core Structure\nThis also means that this isn’t necessarily designed to be read front-to-back. Instead, I would encourage you to jump to a specific subject whenever you encounter it, and work your way from there until the end of your issues.\nHowever, I have still organized the book into subsections that (in my view) link together logically connected subjects and methods, going from simple methods and concepts on towards more complex implementations. However, the sprawling nature of statistical methods and coding means that forcing everything into a linear progression would do more harm than good. Therefore, while you may encounter basic concepts in a given topic (like “Plotting Data” in the main topic “Descriptive Statistics”), you will also find expansions of these contexts in separate topics (in this case “Data Plotting in R”).\nTo emphasize this further, everything that centers on using R, and less on statistical methodology has been organized into it’s own part in the structure. While the numbered parts deal with statistics, part R focuses on using R and RStudio. I would encourage everyone who is not familiar with R (or certain packages I frequently use) to look at this part whenever you’re not sure what I’m doing or why I’m doing things in a certain way - you’ll hopefully find an explanation there.\n\nLast modified: 2023-08-22 15:39, R version 4.3.1\nSource data for this page can be found here.\n\n\n\n\nField, Andy P., Jeremy Miles, and Zoë Field. 2012. Discovering Statistics Using R. London ; Thousand Oaks, Calif: Sage."
  },
  {
    "objectID": "R_gitsetup.html#why-git",
    "href": "R_gitsetup.html#why-git",
    "title": "Working With RStudio and Git(Hub)",
    "section": "Why Git?",
    "text": "Why Git?\nHave you ever accidentally deleted a file and then not found a way to restore it? Have you ever overwritten some important detail in a document and not been able to recover it? Do these situations still haunt you in your dreams? It doesn’t have to be like that! Git is a type of version control for your machine, allowing you to manually set Checkpoints for your progress that you can restore at any time for the entire folder or individual files within it.\nGoing even further, GitHub is a online database where you can upload these checkpoints. While GitHub is the most popular repository, there are many others that build on git or similar structures to offer version control of your files. Now you may ask yourself: “Why would I want to upload my personal projects to the internet?” Well, here are some of the arguments: - Remote data storage: Yes, you can save your progress locally. But if something happens to your machine, you’re still fucked - no matter how many copies you saved. Keeping copies in different places is always a good idea (see 3-2-1 backup recommendations), and GitHub’s owners (Microsoft) should be less likely to lose your data than you yourself. - Easy Cooperation: If you’ve ever worked with other people on the same document, you know what a pain that can be. While Google Docs etc. have already done their part, I still have nightmares about mailing Word documents and PowerPoint presentations back and forth, losing track of who modified what in the process. With GitHub, this is no problem as long as there aren’t multiple people editing the exact same word! (slight exaggeration) - Public sharing of tools: Whenever you create something to solve a problem, it’s reasonable to assume that you’re not the only one having this problem. And now, if you’ve already built a solution, why not just share it? Make everyone’s lives just a bit easier. GitHub allows that if you choose to make your code visible to the public. In fact, many of the R packages you will use are hosted on GitHub (and so is RStudio), as well as the page you’re on right now. Neat, right? :) - Issue tracking: If you build something that other people can use, GitHub can be a great way to collect and keep track of feedback and error reports. If you’re lucky, some of your users might even contribute their own improvements to your project!"
  },
  {
    "objectID": "R_gitsetup.html#installing-git",
    "href": "R_gitsetup.html#installing-git",
    "title": "Working With RStudio and Git(Hub)",
    "section": "Installing Git",
    "text": "Installing Git\n\nStep 0: Make an account\nThis should go without saying, but if you want to use GitHub, you need a GitHub account (don’t worry, it’s free and the basic version is more than enough usually). If you want to use another service, you’ll probably need an account there - and if you don’t want to use anything, you can obviously skip this step. Side Note: Did you know that as a student, you can get GitHub Pro for free? See here for more information!\n\n\nVersion 1: Git over desktop client\nIn this version, all the interactions with GitHub will be handled automatically by a chosen software, and you won’t have to worry about anything. While this can be very convenient, keep in mind that in this way version control only works with this client! Meaning that if you want to sync something not intended, you might be in for an annoying time.\nIf you want to go this way, there is a whole boatload of potential desktop clients to choose from. If you for example already use VS Code for other projects, there’s a Git integration built in and you’ll find plenty of resources online to set that up, as well as plenty of plugins to expand it. Going beyond VS Code, GitHub has it’s own desktop client that’s able to sync any folder on your device. However, the last time I used it, I found it to be very annoying and clunky. The better alternative in my view is GitKraken. The Team behind GitKraken is also responsible for the VS Code GitLens extension if you want to upgrade its capabilities.\n\n\nVersion 2: Git in RStudio\n\nLast modified: 2023-08-22 16:17, R version 4.3.1\nSource data for this page can be found here."
  },
  {
    "objectID": "R_gitsetup.html",
    "href": "R_gitsetup.html",
    "title": "Working With RStudio and Git(Hub)",
    "section": "",
    "text": "Why Git?\nHave you ever accidentally deleted a file and then not found a way to restore it? Have you ever overwritten some important detail in a document and not been able to recover it? Do these situations still haunt you in your dreams? It doesn’t have to be like that! Git is a type of version control for your machine, allowing you to manually set Checkpoints for your progress that you can restore at any time for the entire folder or individual files within it.\nGoing even further, GitHub is a online database where you can upload these checkpoints. While GitHub is the most popular repository, there are many others that build on Git or similar structures to offer version control of your files. Now you may ask yourself: “Why would I want to upload my personal projects to the internet?” Well, here are some of the arguments:"
  },
  {
    "objectID": "R_gitsetup.html#version-1-git-over-a-desktop-client",
    "href": "R_gitsetup.html#version-1-git-over-a-desktop-client",
    "title": "Working With RStudio and Git(Hub)",
    "section": "Version 1: Git over a desktop client",
    "text": "Version 1: Git over a desktop client\nIn this version, all the interactions with GitHub will be handled automatically by a chosen software, and you won’t have to worry about anything. While this can be very convenient, keep in mind that in this way version control only works with this client! Meaning that if you want to sync something not intended by the developers, you might be in for an annoying time.\nIf you want to go this way, there is a whole boatload of potential desktop clients to choose from. If you for example already use VS Code for other projects, there’s a Git integration built in and you’ll find plenty of resources online to set that up, as well as plenty of plugins to expand it. Going beyond VS Code, GitHub has it’s own desktop client that’s able to sync any folder on your device. However, the last time I used it, I found it to be very annoying and clunky. The better alternative in my view and the one I use pretty regularly is GitKraken. The Team behind GitKraken is also responsible for the VS Code GitLens extension if you want to upgrade its capabilities."
  },
  {
    "objectID": "R_gitsetup.html#version-2-git-on-your-system-and-in-rstudio",
    "href": "R_gitsetup.html#version-2-git-on-your-system-and-in-rstudio",
    "title": "Working With RStudio and Git(Hub)",
    "section": "Version 2: Git on your system and in RStudio",
    "text": "Version 2: Git on your system and in RStudio\n\nStep 1: Installing Git\nAs mentioned previously, GitHub is only a web service for hosting you checkpoints and data. To communicate with GitHub, you can use a range of standardized commands and operations made available via a software called Git. Unfortunately (and this is the reason why desktop clients exist), Git is code-only and requires a Unix-terminal to function properly - which means Windows users have to jump through a few hoops when compared with everyone else.\n\n\nGit on Linux/Unix\nBased on your chosen distro, Git can easily be installed via package managers or built from source. For an installation overview for many of the more common distros see: https://git-scm.com/download/linux\n\n\nGit on MacOS\nIf you’re lucky, Git might already be installed on your machine from the get-go. To check if this is the case, simply open the terminal app and enter git --version. If a version number is displayed, git is installed on your machine - and if not, MacOS should ask you if it should install it now.\n\n\nGit on Windows\nWindows - unlike the other two options - does not have built-in Unix support, which means we also have to install a Unix terminal. Fortunately, Git comes with a built-in terminal (Git Bash) if you install it from the official website\nSide Note: Git will ask you during installation for a standard editor. In priniple this choice shouldn’t matter, as that editor will only be used in case of errors, which you shouldn’t encounter when using Git through RStudio or desktop clients. Still, if you don’t know what you’re doing and have never heard of VI or VIM, it’s probably best to switch this to something like Nano or Notepad++ (if installed). All other installation steps can be left as default for normal use.\n\n\nStep 2: Git and RStudio\nAfter you install Git, RStudio should automatically detect it. To check, you can go to Tools -&gt; Global Options -&gt; GIT/SVN and see if it is listed there. If it isn’t listed there, you can manually add it by specifying the path: yourGitFolder/bin/git.exe. Restarting RStudio might also lead to a Git detection, especially if RStudio was opened during the Git installation process.\n\n\nStep 3: Configuring Git and GitHub\nAll the following steps can be done via the previously installed Git Bash terminal - however, this is (in my view) an unintuitive and error-prone process for casual users. Luckily, there is a way to configure Git in a more user-friendly way using R’s usethis package. After installing and loading usethis, you can open Git’s configuration directly using the edit_git_config command. Enter your name and the mail address of your GitHub account as follows:\n[user]\n    name = Your Name\n    email = github@mail-adress.com\nSide Note: The name you set here can be anything you like - however, keep in mind that it will appear whenever you upload something to GitHub from this device. You could for example give a name like Paul work laptop, to easily track which device made the changes.\nAfter this step, Git is ready to serve as a local version control. However, to sync your changes with GitHub, one more step of authentication is needed - after all, if it were only about name and mail address, anyone could commit changes in your name.\nLuckily, the usethis package can help us here once again: Running the function create_github_token() should open up the correct GitHub website to create your own so-called Personal Access Token. Here, you can also specify whether this token should only be active for a limited time (useful when working on other people’s machines) or what privileges this machine should have (touch this if you know what you’re doing, otherwise defaults should be fine). After completing this step, GitHub should present you with a token of the format ghp_....\nNote down this token somewhere, as you will never see it again once you close the site!\nTo set this token on your machine, go back to R and run the function gitcreds::gitcreds_set() (installed alongside usethis) and enter the token you just created. Theoretically, everything should be set up - you can check that yourself by running git_sitrep(). The big advantage of this is that Git is now globally configured and associated with your GitHub account, no matter what program you want to use on your machine - if it has Git or GitHub functionality, it should automatically detect your configurations.\nCongratulations! You should now (hopefully) have everything set up and ready to use version controlling and GitHub! In the next step, we’ll be looking at actually working with Git inside RStudio, as there is a lot of neat functionality built-in to take work off of you.\nIf you want to know more or take a deep dive on using R and Git - or if you encounter any problems that require a more thorough explanations - I recommend you have a look at https://happygitwithr.com/\n\nLast modified: 2023-08-23 12:59, R version 4.3.1\nSource data for this page can be found here."
  },
  {
    "objectID": "R_gituse.html",
    "href": "R_gituse.html",
    "title": "Using Git(Hub) in RStudio",
    "section": "",
    "text": "Starting a project\nTo have Git integration work from inside RStudio, it is strictly necessary to work inside an RStudio project rather than just a loose collection of code files scattered around your machine. This is because RStudio seems to treat the .Rproj file as an anchor point to build the file management around. While there are many ways to start a project, I want to highlight two different ways of doing things - although both boil down to the same method in the end.\nNow that you’ve opened your Git-synced project in RStudio, you might have already noticed something new: The Environment tab (usually top right) features a new tab simply labeled Git. When working with Git in RStudio, this tab is where all the magic happens - and everything that you otherwise would have to execute manually via the aforementioned Unix-terminal. Don’t be scared, but I will now show you a graphic visualizing the basic working steps in Git that I stole from Reddit:\nYou should already know many of the areas mentioned in this image, although maybe not by this name: The remote branch is the repo saved on GitHub, while the working branch is the file structure on your current machine. The other layers in between are what makes Git so powerful for version control (and so irritating in the beginning). Here’s how it works on a basic level:\nSide Note: While you should save often and therefore also commit your changes often in case of emergency, you don’t have to push your changes every time you update something. It can be entirely valid to collect multiple changes and push them all in one go, especially when you’re still toying around with something half-baked that doesn’t entirely work yet. Similarly, if you’re using some automation, pushing often might be a bad idea. For example, this web interface gets automatically generated from the files I provide in the associated repo. If I were to push every little change, it would constantly re-compile and re-deploy this website for every minor spelling mistake - which would be annoying, energy-inefficient and would probably make Microsoft reconsider keeping this functionality as a free feature.\nNow, if you’ve already made some changes to your new R project, you might notice that things start to appear inside the git-tab un RStudio. Based on the type of change, you should see a coloured symbol appear in the “Status” column: ?(New file), A(dded), M(odified), D(eleted) and R(enamed) will probably be the ones you’ll encounter most frequently. This window is RStudio’s pendant to the staging area I just mentioned - here, files are being prepared for a git synchronization. What the command git add does in the image above can be achieved here by clicking the check box:\nTo commit your selected files, you simply have to click the aptly named “Commit” button, leave an informative commit message as to what you did and why (so you know what happened when you look back in a few weeks/months/years) in the now open window, and then press “Commit” there as well.\nCongratulations! You now know how to use Git for version control! All that remains now is syncing your files with GitHub - something RStudio directly lets you know by complaining that your local branch is ahead of GitHub (here called origin/main) in it’s update history. To rectify this, simply press the green, upwards pointing arrow. In the opposite situation, where GitHub is further ahead than your local machine, RStudio would still complain, and you would pull by pressing the blue, downwards pointing arrow."
  },
  {
    "objectID": "R_gituse.html#new-project-that-started-on-github",
    "href": "R_gituse.html#new-project-that-started-on-github",
    "title": "Using Git(Hub) in RStudio",
    "section": "New project that started on GitHub",
    "text": "New project that started on GitHub\nThis in my view is the cleanest way of organizing version control, as much of the setup headaches get handled automatically for you:\n\nGo on GitHub and press the nice + button at the top to create a new repository\nOpen your newly created repository and press the green Code button at the top. Copy the web address displayed here\nOpen RStudio, start a new project (File -&gt; New Project), select Version Control -&gt; Git and enter the link you copied into the Repository URL field.\n\nSide Note: To keep things organized, I highly recommend selecting a dedicated folder for coding projects on your machine: If you input this folder at Create Project as subdirectory of, RStudio will remember this and automatically select it the next time you generate a new project.\n\n\n\n\n\nThe big advantage of doing things this way is that the selected GitHub repository will be seen as the origin without needing manual setup. In this way, the project should immediately be usable, without having to worry about manually pushing or pulling files. If there are already files in your chosen repository, these will also automatically be downloaded and made available locally."
  },
  {
    "objectID": "R_gituse.html#preexisting-local-project",
    "href": "R_gituse.html#preexisting-local-project",
    "title": "Using Git(Hub) in RStudio",
    "section": "Preexisting local project",
    "text": "Preexisting local project\nDo you already have some old project lying around that you want to update and share and/or save on GitHub? Then this is the step for you! The core idea in this step is the same as before: We follow the instructions above to generate an (empty) repository and generate it locally as a new project. The trick with this approach is that you can now go ahead and - after opening the project’s folder in a file manager of your choice - simply copy all your old files into this new folder. RStudio’s Git integration will recognize these files as new to the project, and you will be able to work with them as if you had just created them inside the project."
  },
  {
    "objectID": "R_gituse.html#Future",
    "href": "R_gituse.html#Future",
    "title": "Using Git(Hub) in RStudio",
    "section": "Was nun?",
    "text": "Was nun?\nDu kennst nun die grundlegende Funktionsweise von Git und GitHub und weißt, wie du sie aus RStudio zur Versionskontrolle benutzen kannst.\nDIe Nutzung von Git ermöglicht dir zusätzlich noch eine ganze Reihe weiterer Möglichkeiten. So kannst du beispielsweise mit mehreren anderen Nutzern an demselben Projekt arbeiten, und deine und ihre Commits einfach synchronisieren. Außerdem bietet Git dir die Möglichkeit, ein einzelnen Programm in mehreren branches zu entwickeln, sodass du beispielsweise eine stabile Version deines Codes öffentlich anderen Nutzern verfügbar machen kannst, während du in einem anderen Branch experimentell mit neuen Ideen und Inhalten experimentierst. Diese Branches lassen sich bei abgeschlossenem Experiment jederzeit miteinander zusammenführen, die genaue Durchführung dieser und anderer Nutzungsmethoden sprengt jedoch den Rahmen dieser kurzen Einführung.\nIch wünsche viel Erfolg in der Nutzung von Git und Happy Coding!\nAs before, if you’re still unsure about how things work or want to learn more about the possibilities Git and R offer, I recommend you look at: https://happygitwithr.com/index.html\n\nLast modified: 2023-08-23 14:54, R version 4.3.1\nSource data for this page can be found here."
  }
]