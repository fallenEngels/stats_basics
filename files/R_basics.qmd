# Getting to know R {.unnumbered}

```{r setup, include=FALSE}
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
```

#### This page contains ... {.unnumbered}

... a basic overview over R and RStudio to get you started on understanding what exactly is happening when you run R code. Why use RStudio - is R not enough? How do I navigate my data? What are libraries?

## Launching R {.unnumbered}

So you've successfully installed R (if not, try clicking [here](https://cran.r-project.org/)) and are now wondering about how to work with it? Fear not, for I am here to help you out!

![R over GUI (left) or over system console (here: Windows)](../_rsc/r/r_console.png)

Launching R for the first time if you're not already familiar with coding languages might be daunting. No matter if you launched the console (right) or GUI version (left), you will find yourself presented with an arguably garish and hard-to understand console. Unfortunately, you and this console will have to become best friends, as this is where you will do all the actual *work* - however, we'll get to getting you a nicer workspace soon, don't worry.\
Technically, this console is all you need to work with R: As you can see above, I've loaded a preinstalled dataset and calculated a linear regression in just two lines of code. You can also use this console to do some simple math, for example calculating the cost of tipping 15% on a meal costing 8.99â‚¬ or the number of seconds in a day:

```{r }
# meal + 15% tip
8.99 + 0.15*8.99

# seconds in a day
60 * 60 * 24
```

Note that usually, including spaces in your code will not change anything about the way it is processed, but can and will improve its readability!

### Restrictions of using R only {.unnumbered}

However, while R is a mighty tool, it suffers when used in the way presented above: Saving your work for future reproduction becomes cumbersome as you will have to keep track of each individual command, and especially when working with more complex analysis models, you will sooner or later lose control over what variables and data sets you have loaded and how they are named.

## A better environment: RStudio {#Rstudio}

This is where [RStudio](https://posit.co/downloads/) comes in. RStudio is what's called an IDE, an *integrated development environment* that aims to improve working with R.

![Rstudio layout](../_rsc/r/RStudio.png)

You might recognize one of the four panes presented above (you can get the fourth one by opening an existing script or creating a new one via the circled icon) - it's the **R console** we've encountered previously, only now it's tucked in nicely between a variety of other useful panes. Let's quickly look at all panes and their respective purposes:

-   The **code editor** is where you will probably spend most of your time. Here, you can arrange the code you've written and save it as a *script* for easy reuse. You can also run your code by clicking the "Run" button in the top right of the code editor, or via the keyboard shortcut *Ctrl/Cmd + Enter*. Running will execute whatever line the cursor is currently in, whatever parts of your script are currently highlighted.\
-   The **R console** is what we've already seen when looking at standalone R. While you can write and execute your code in the code editor, the results and potential messages will all be displayed in the R console, so keep an eye on this pane when you run something to see if it actually worked. It also provides access to other consoles, in case you need them for anything.\
-   The **environment** pane provides an overview of all variables, user functions and data sets that are currently loaded and available. It provides an overview over both their names and dimensions (i.e. how many rows/columns a data set has, etc.) and can be used to quickly inspect data sets by clicking on the respective entry. It includes other tabs as well, but most used will be the "environment" tab as well as the "git" tab when working with GitHub or other code repositories.\
-   Last but not least, the fourth pane contains a variety of information like a *inbuilt file explorer*, a *plot* tab to view and save created graphics and - arguably most important - a *help* tab containing useful information. In R, **basically every function is documented in detail**, and to access this documentation, you simply have to type `?FUNCTION` into the console. Running `?mean`, for example, brings up the documentation of the `mean()`-function, showing that this function not only computes the mean of a given distribution, but can also be extended with optional parameters to trim a certain percentage of "outliers" before calculation.

::: {.callout-note title="Side Note"}
Since some special functions aren't really *named* - think of arithmetic operators like `+` or dplyr's `%>%` pipe operator, you can't use `?+` to access their help functions. Instead, you have to wrap them in quotes, like so: `?"+"`.
:::

By the way, you can freely move and arrange these panes to your liking, but keeping the default view is also completely fine.

## Navigating R {.unnumbered}

### Assigning data: Variables {.unnumbered}

When working with data, you're usually dealing with complex tables or lists that you need more than once. Typing them out every time would be cumbersome, which is why you can *save them as an object using the assignment operator* `<-` to improve ease of use. You can save most code results as an object, including but not limited to numbers, plots or summary statistics. In the following example, I've saved a *character string*, a *vector of numbers* as well as *a data frame of car statistics* as objects.

```{r vars}
character <- "green" # one character
number <- c(1, 4, 2, 5, 6, 7, 9, 4, 6, 2) # 10 numbers
cardata <- force(mtcars) # a data frame
```

I also highly recommend giving your variables short, but descriptive names so that you can easily identify what a given variable contains at any given time.

::: {.callout-warning title="Important"}
R does not care what type of data you want to save in an object. It will happily overwrite any saved object if you tell it to, no matter what the original data was or the new data will be.
:::

### Comments {.unnumbered}

While not directly relevant to your code, comments are an important part of keeping your sanity intact. Putting a `#` anywhere in your code will cause all further writing in the same line to be ignored by R when running functions. This means that you can put comments in their own line (see the first code block on this page) or in the same line as your code (see the second code block on this page). No matter where you want to keep them, comments are a great way to document what you've done (and why you've done it), which will help immensely in understanding your code at a later date, or someone else's code if you're ever collaborating with other people.

### Vectors {.unnumbered}

Whenever you're working in R, you will probably be working with either *vectors*, *matrices* or *data frames* containing certain data types. While there are other data types, those three will probably be the bulk of what you encounter.\
A vector is simply a list of connected items (this gets confusing, as there is also a *list* data type). Both `character` and `number` created above are vectors, even though `character` only has one item, "green". As you can see, creating a vector is easy, as you just have *concatenate* a number of values via the `c()`-function.\
Vectors can be navigated by using square brackets: `number[1]` will give us the first observation of our `number` vector (that being "1"). You can also *subset* vectors by specifying certain ranges or positions, i.e. `number[2:4]` will give elements 2, 3 and 4 of our vector, while `number[9, 2, 4]` will return the 9th, 2nd and 4th elements, in that order.

Vectors can be of any length, but cannot feature multiple data types (more on that later). Combining differing data types to a vector will lead to **R guessing what data type you want and changing everything accordingly**, which is a common source of issues!

See below: as soon as a character item is added to our `number`-vector, math is no longer possible.

```{r types, error=T}
number
number[2] + number[5]
number <- c(number, "not a number")
number
number[2] + number[5]
```

::: {.callout-warning title="Important"}
If you are familiar with "real" coding languages like Python or C, you might notice something odd in this explainer - and yes, you're right: The first element of a vector is accessed via \[1\] because R, unlike those languages, does not start counting at 0!
:::

### Matrices and data frames {.unnumbered}

A matrix is the two-dimensional brother of a vector, storing data on two dimensions (commonly referred to as "rows" and "columns"). Just like vectors, however, matrix items across both rows and columns need to be of the same data type. Items inside matrices are also accessed via square brackets, however this time it needs two digits: one indicating row, and one indicating column. `matrix[2,1]` will for example spit out the element in the second row of the first column. To access an entire row/column, just leave the other entry empty (but keep the comma!): `matrix[2, ]` for the entire second row.\
Working with real-world data, however, you will encounter data in different formats. For example, when working with survey data, you will find numeric values (age, ...), character vectors (name, ...) and other data types in the same dataset. While Matrices can't be used tor this sort of data, *data frames* can. Data frames are basically a group of vectors of the same length, with related entries on the same position (i.e. the 5th "age" entry will refer to the same person as the 5th "name" entry). For this reason, data frames are probably the most widely used data type. (If you're wondering why matrices are still important if data frames are so much better, the answer is simple: *matrix multiplication* is a powerful mathematical tool in many calculations.)

Just like matrices, you can navigate data frames via square brackets - if "age" is the first column, then `data[5, 1]` will return the age of the 5th respondent. Data frame columns can also be accessed directly by name using the `$` operator: `data$age` would return a *vector* of the entire age column, the same result as using `data[, 1]`. Getting the 5th entry also works both ways, with `data[5, 1]` and `data$age[5]` producing the same results.\
This will be a theme with R moving forward: There is a variety of ways to achieve your goals, which way you choose will (mostly) be down to personal preferences.\
If you are wondering how you could possibly know the names of the variables in your data set, there is again a variety of ways to achieve your goals, with the simplest being the `names(data)` function that lists the names of all columns, in order.

### Data types {.unnumbered}

We have encountered *numbers* and *characters* before. We've also seen that you can do maths with numbers, but not characters, and we have also seen that when combining both, characters take priority. Numbers and characters will probably be the bulk of what you encounter, but there are a multitude of data types built into R, and some packages expand these definitions even further. Another common data type besides *numbers* and *characters* is the *logical* data type, which can take the values `TRUE` and `FALSE`.\
This data type is a bit weird, as it usually has no use on its own, but can be used to subset other rows, as it can be the results of simple filtering equations. Running `data$age < 30` for example returns a vector of the same length as `data$age`, with values **TRUE** if the age is under 30 and **FALSE** otherwise. This can be combined with the square brackets above to filter data: `data[data$age < 30, ]` for example will return a modified `data` frame, including the rows of respondents under 30 and all columns (since the second parameter was left empty).

While not *technically* data types, **NA** is still something we should talk about. NA stands for "non-applicable" and will be used whenever there is *no value to be displayed*, be it because there is no value in the underlying data for that case (like accessing a row/column that doesn't exist) or because some sort of function produces no output (like running `mean()` on a character vector). NAs aren't inherently a bad thing, as they will be discarded for most calculations or can be discarded manually via optional arguments (`mean()` has a `na.rm` argument to ignore NA in the data), however, you should still be aware whether there are any NAs in your data.

::: {.callout-note title="Side Note"}
A few points to expand further on combining and transforming data types:\
1. While R - just like many other programming languages - features different types of "numbers" (float, double, ...), you usually do not have to worry about converting these. R is pretty good at guessing which display type is the most appropriate for any situation.\
2. In case R cannot figure out your data's types, it should default to treating them as character strings. This may be annoying since you can't do math with strings, but they can contain basically everything - so you at least shouldn't lose any data.\
3. In case you ever find that R wrongly converted something (or want to force a conversion, even if it means losing data), R has a variety of functions starting with `as.` to accomplish this: For example, `as.integer()` forces everything to be treated as an integer - anything that can't be converted gets converted to `NA` values instead.
:::

### Functions {.unnumbered}

In R, functions are your bread and butter. R comes packed with a wide variety of functions, useful for finding the minimum value of a vector or calculating complex regression models. It can be expanded even more via *packages* (more on those later). Functions are usually lowercase and end with brackets. The `mean()`function we encountered before is one such function. Given a vector, it calculates the mean of all the items in this vector:

```{r meanex}
mean(c(1,2,3,4,5,6,7,8,9,10))

```

As we've seen when running `?mean`, each function comes with several parameters for us to tweak. Each parameter has a name attached to it, but if no names are specified, R treats them in the order they appear. To illustrate: If we write `mean(c(1,2,3))` R will interpret the input vector as the first argument (i.e. the vector to compute the mean for). It is identical to manually specifying the argument every time (i.e. `mean(x = c(1,2,3))`). Same goes for multiple arguments: `mean(c(1,2,3), 0.2)` and `mean(x = c(1,2,3), trim = 0.2)` produce the same result. Keep in mind that if you don't specify argument names, you'll have to keep within the function's preset order of arguments, while when specifying you can also switch the arguments around (i.e. `mean(trim = 0.2, x = c(1,2,3))`).

## Expanding R: Libraries and packages {.unnumbered}

While R comes prepackaged with a variety of functions, you will find yourself limited in many circumstances. For example, reading an Excel-file (.xls or .xlsx) into R is not possible with R out-of-the-box.\
Fortunately, due to its open-source nature, everyone can write their own functions and commands to expand on R's capabilities and publish them for everyone else to use. These collections of functions are commonly called *libraries* and are distributed in a set format called *packages*. There are [a whole lot of packages available](https://cran.r-project.org/web/packages/available_packages_by_name.html), and you will not need almost all of them.\
As an example, R cannot natively load data from Excel-files (.xlsx, ...). However, a variety of packages include functions to enable this, like the `read_excel()` function from the `readxl` package.

You can install packages onto your local machine at any time (as long as you have an internet connection) via the `install.packages()` command. To actually use the installed packages inside R, you will have to load them into your project via the `library()` command.

::: {.callout-note title="Side Note"}
Since you are matching names on a distant server in order to find your content, `install.packages()` requires a string (`install.packages("name")`) to match.\
If you're actually loading an installed library, however, the `library()` function searches for a package object, instead of matching a string, meaning you don't need the quotation marks (`library(name)` without the ")!
:::

Keep in mind that while you only need to install packages once (unless you want to update, which does not happen automatically), you have to load and reload your libraries every time you open up R and before you can run functions sourced from these packages. As such, I recommend putting the required `library()` functions at the beginning of your script for easier access.

------------------------------------------------------------------------

```{python sys, include = F}
import os
from datetime import datetime
lastmodified = datetime.fromtimestamp(os.stat('R_basics.qmd').st_mtime)
lastmodified = lastmodified.strftime('%Y-%m-%d %H:%M')  # Format as 'YYYY-MM-DD HH:MM'
```

**Last modified:** [`r py$lastmodified`]{style="color:#00bc8c"}, R version [`r getRversion()`]{style="color:#00bc8c"}\
**Source data for this page** can be found <a href="https://github.com/fallenEngels/stats_basics/blob/main/files/R_basics.qmd">here</a>.
